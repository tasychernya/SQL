1. Что такое СУБД? Какие ты знаешь СУБД?
Системы Управления Базами Данных (СУБД) — это программные обеспечения, которые обеспечивают создание, организацию, управление и взаимодействие с данными в базах данных. СУБД позволяют пользователям и приложениям хранить, изменять и извлекать данные.
Примеры СУБД:
MySQL — популярная реляционная СУБД, часто используемая в веб-приложениях.
PostgreSQL — мощная объектно-реляционная СУБД с поддержкой передовых возможностей.
SQLite — легковесная СУБД, часто используемая в мобильных и встроенных приложениях.
Oracle Database — коммерческая СУБД, известная своей надежностью и масштабируемостью.
Microsoft SQL Server — семейство программных продуктов от Microsoft для управления базами данных.

2. Что такое БД? Какие бывают БД?
База Данных (БД) — это структурированная коллекция данных, которая организована таким образом, чтобы облегчить доступ, управление и обновление данных.
Типы БД:
Реляционные базы данных (например, MySQL) — данные хранятся в таблицах, между таблицами могут быть установлены связи.
Нереляционные БД (NoSQL) — данных хранятся в форме документов (например, MongoDB) или в виде пар "ключ-значение" (например, Redis).
Объектные БД — данные хранятся в виде объектов, как в объектно-ориентированном программировании.
Графовые БД (например, Neo4j) — данные представлены в виде графов, что позволяет эффективно работать с связанными данными.

3. В каком виде хранятся данные в Реляционных БД?
В реляционных БД данные хранятся в виде таблиц (отношений). Каждая таблица состоит из строк (записей) и столбцов (атрибутов).
Пример: Таблица «Пользователи» может иметь столбцы: ID, Имя, Email, Дата рождения. Каждая запись в таблице представляет отдельного пользователя.

4. Что такое SQL?
SQL (Structured Query Language) — это стандартный язык программирования для работы с реляционными базами данных. С его помощью можно выполнять различные операции, такие как создание и изменение таблиц, вставка, удаление и изменение данных, а также запрос информации.

5. Какая разница между MySQL и SQL?
SQL — это язык запросов, который используется для работы с реляционными базами данных.
MySQL — это конкретная реализация СУБД, которая использует SQL для манипуляции данными. Таким образом, MySQL использует SQL как язык для выполнения операций над базами данных.

6. Что такое первичный ключ (Primary Key)? Как использовать?
Первичный ключ — это уникальный идентификатор для каждой записи в таблице. Он гарантирует, что каждая запись может быть однозначно идентифицирована.
Как использовать:
При создании таблицы можно назначить столбец как первичный ключ.
CREATE TABLE Пользователи (
    ID INT PRIMARY KEY,
    Имя VARCHAR(100),
    Email VARCHAR(100)
);


7. Что такое внешний ключ (Foreign Key)? Как использовать?
Внешний ключ — это столбец в одной таблице, который ссылается на первичный ключ в другой таблице, тем самым устанавливая связь между таблицами.
Как использовать:
CREATE TABLE Заказы (
    ЗаказID INT PRIMARY KEY,
    ПользовательID INT,
    FOREIGN KEY (ПользовательID) REFERENCES Пользователи(ID)
);


8. Что такое реляции? Зачем нужны реляции?
Реляции — это связи между таблицами в реляционной БД. Они нужны для организации данных и упрощения доступа к ним, а также для обеспечения целостности данных.

9. Приведи пример реляции, как она вообще работает?
Например, у нас есть две таблицы: «Пользователи» и «Заказы».
Таблица «Пользователи»:


ID: 1, Имя: "Иван"
Таблица «Заказы»:


ЗаказID: 101, ПользовательID: 1
Здесь связь между таблицами указывает на то, что заказ с ID 101 был сделан пользователем с ID 1.

10. Какие ты знаешь JOIN? Распиши подробно про каждый.
INNER JOIN — возвращает строки, которые имеют соответствие в обеих таблицах.
 SELECT *
  FROM Пользователи
  INNER JOIN Заказы ON Пользователи.ID = Заказы.ПользовательID;

LEFT JOIN (или LEFT OUTER JOIN) — возвращает все строки из левой таблицы и совпадающие строки из правой таблицы. Если соответствия нет, результат будет NULL.
 SELECT *
  FROM Пользователи
  LEFT JOIN Заказы ON Пользователи.ID = Заказы.ПользовательID;

RIGHT JOIN (или RIGHT OUTER JOIN) — возвращает все строки из правой таблицы и совпадающие строки из левой таблицы.
 SELECT *
  FROM Пользователи
  RIGHT JOIN Заказы ON Пользователи.ID = Заказы.ПользовательID;

FULL JOIN (или FULL OUTER JOIN) — возвращает строки, когда есть совпадения в одной из таблиц.
 SELECT *
  FROM Пользователи
  FULL OUTER JOIN Заказы ON Пользователи.ID = Заказы.ПользовательID;


11. Что бы работали JOIN, нужны ли реляции?
Да, чтобы использовать JOIN, необходимо установить реляции между таблицами, иначе не будет понимания, какие данные нужно связывать.

12. Что такое Union? Как использовать?
UNION объединяет результаты двух или более SELECT-запросов в один результат, исключая дубликаты.
SELECT Имя FROM Пользователи
UNION
SELECT Имя FROM Работники;


13. В чем разница между UNION и UNION ALL?
UNION — удаляет дубликаты из результата.
UNION ALL — сохраняет все строки, включая дубликаты.
SELECT Имя FROM Пользователи
UNION ALL
SELECT Имя FROM Работники;


14. Какие существуют типы связей в базе данных? Приведите примеры.
Один к одному (1:1) — один запись в одной таблице соответствует одной записи в другой. Например, каждый человек имеет только один паспорт.
Один ко многим (1:N) — одна запись в первой таблице может соответствовать многим записям во второй. Например, один пользователь может делать много заказов.
Многие ко многим (M:N) — одна запись может соответствовать многим записям в другой и наоборот. Например, студенты могут быть записаны на множество курсов, а каждый курс может иметь множество студентов.

15. Что такое SELECT? Как использовать?
SELECT — это оператор SQL, который используется для извлечения данных из базы данных.
Как использовать:
SELECT * FROM Пользователи;  -- Получить все столбцы
SELECT Имя, Email FROM Пользователи;  -- Получить определенные столбцы


16. Что такое подзапрос? Как использовать?
Подзапрос — это запрос, вложенный в другой запрос. Он может использоваться для извлечения данных, которые будут использоваться в основном запросе.
SELECT * FROM Пользователи
WHERE ID IN (SELECT ПользовательID FROM Заказы);


17. Что такое CREATE TABLE? Как использовать?
CREATE TABLE — оператор SQL, который используется для создания новой таблицы в базе данных.
Как использовать:
CREATE TABLE Пользователи (
    ID INT PRIMARY KEY,
    Имя VARCHAR(100),
    Email VARCHAR(100)
);


18. Какие ты можешь использовать Числовые типы данных при создании таблицы?
INT — целые числа.
FLOAT — числа с плавающей точкой.
DOUBLE — числа с двойной точностью.
DECIMAL — фиксированная точность, полезно для денежных значений.

19. Какие ты можешь использовать Текстовые типы данных при создании таблицы?
CHAR(n) — строка фиксированной длины.
VARCHAR(n) — строка переменной длины.
TEXT — текст длиной до 65,535 символов.
BLOB — бинарные большие объекты.

20. Какие ты можешь использовать типы данных Даты при создании таблицы?
DATE — для хранения дат.
DATETIME — для хранения даты и времени.
TIMESTAMP — для хранения временных меток.
TIME — для хранения времени.

21. В чем разница между типом данных CHAR и VARCHAR в SQL?
CHAR — фиксированная длина, даже если строка короче, то будут добавлены пробелы.
VARCHAR — переменная длина, занимает меньше места, если длина строки меньше максимальной.

22. Чем NULL отличается от 0?
NULL — это отсутствие значения. Это означает, что данные не существуют или не были заданы.
0 — это числовое значение, представляющее ноль.

23. Какие ограничения существуют при создании таблиц?
NOT NULL — столбец не может содержать NULL.
UNIQUE — столбец должен содержать уникальные значения.
PRIMARY KEY — уникальный идентификатор записи.
FOREIGN KEY — ссылка на другой столбец в другой таблице.
CHECK — обеспечивает соблюдение условия для значений.

24. Что такое INSERT INTO? Как использовать?
INSERT INTO — оператор SQL для вставки новых строк в таблицу.
Как использовать:
INSERT INTO Пользователи (Имя, Email) VALUES ('Иван', 'ivan@example.com');


25. Что такое Update? Как использовать?
UPDATE — оператор SQL, используемый для изменения существующих данных в таблице.
Как использовать:
UPDATE Пользователи SET Email = 'ivan_new@example.com' WHERE ID = 1;


26. Что такое DELETE, TRUNCATE и DROP? В чем их отличие?
DELETE — удаляет строки, поддерживая возможность применения условий (с WHERE) и возвращает удаленные строки.
 DELETE FROM Пользователи WHERE ID = 1;

TRUNCATE — удаляет все строки из таблицы, но структура таблицы сохраняется. Не поддерживает WHERE и возвращает только структуру.
 TRUNCATE TABLE Пользователи;

DROP — удаляет таблицу или базу данных полностью, включая все данные и структуру.
 DROP TABLE Пользователи;


27. Что такое ALTER TABLE? Как использовать?
ALTER TABLE — оператор SQL, используемый для изменения структуры существующей таблицы.
Как использовать:
ALTER TABLE Пользователи ADD Телефон VARCHAR(15);  -- Добавить новый столбец
ALTER TABLE Пользователи DROP COLUMN Телефон;  -- Удалить столбец


28. Какие знаешь агрегатные функции? Как использовать?
Агрегатные функции выполняют вычисления на наборе значений и возвращают одно значение. Примеры включают:
COUNT() — подсчет числа строк.
 SELECT COUNT(*) FROM Пользователи;

SUM() — суммирование значений.
 SELECT SUM(Цена) FROM Заказы;

AVG() — среднее значение.
 SELECT AVG(Цена) FROM Заказы;

MAX() — наибольшее значение.
 SELECT MAX(Цена) FROM Заказы;

MIN() — наименьшее значение.
 SELECT MIN(Цена) FROM Заказы;


29. В чем разница между операторами GROUP BY и DISTINCT?
GROUP BY — используется для группировки строк, имеющих одинаковые значения в указанных столбцах, с возможностью применения агрегатных функций.
 SELECT Страна, COUNT(*) FROM Пользователи GROUP BY Страна;

DISTINCT — используется для выборки уникальных значений, но не группирует строки.
 SELECT DISTINCT Страна FROM Пользователи;


30. В чем разница между операторами WHERE и HAVING?
WHERE — используется для фильтрации строк до агрегации, не может использовать агрегатные функции.
 SELECT * FROM Пользователи WHERE Возраст > 18;

HAVING — используется для фильтрации групп после агрегации, может использовать агрегатные функции.
 SELECT Страна, COUNT(*) FROM Пользователи GROUP BY Страна HAVING COUNT(*) > 10;


31. Что такое Order by? Особенности работы Order by?
ORDER BY — оператор SQL, который используется для сортировки результатов запроса по одному или нескольким столбцам.
Особенности работы:
По умолчанию сортировка идет по возрастанию. Для сортировки по убыванию используется DESC.
SELECT * FROM Пользователи ORDER BY Имя ASC;  -- Сортировка по алфавиту
SELECT * FROM Пользователи ORDER BY Дата_регистрации DESC;  -- Сортировка по дате


32. Для чего используются операторы IN, BETWEEN, LIKE?
IN — используется для проверки, содержится ли значение в наборе значений.
 SELECT * FROM Пользователи WHERE Страна IN ('Россия', 'США');

BETWEEN — используется для проверки, попадает ли значение в указанный диапазон.
 SELECT * FROM Пользователи WHERE Возраст BETWEEN 18 AND 25;

LIKE — используется для поиска паттернов в строковых данных. Использует символы подстановки (% и _).
 SELECT * FROM Пользователи WHERE Имя LIKE 'Ив%';  -- Имена, начинающиеся с "Ив"


33. Какие условия выполнения операторов OR и AND?
Оператор OR
Оператор OR используется в логических выражениях для объединения условий. Он возвращает true, если хотя бы одно из условий истинно. Например, в SQL запросе:
SELECT * FROM Пользователи WHERE Возраст < 18 OR Страна = 'Россия';

В этом запросе выбираются все записи из таблицы "Пользователи", где либо возраст пользователя меньше 18 лет, либо он находится в России. Это означает, что если у пользователя, например, возраст 16 лет, или он живет в России, запись будет включена в результат.
Пример использования:
Пользователь с возрастом 17 лет из Украины — запись будет возвращена (первое условие истинно).
Пользователь с возрастом 20 лет и из России — запись также будет возвращена (второе условие истинно).
Пользователь с возрастом 25 лет и из Германии — запись не будет возвращена (оба условия ложны).
Оператор AND
Оператор AND используется для объединения условий так, что он возвращает true только тогда, когда все условия истинны. Например:
SELECT * FROM Пользователи WHERE Возраст > 18 AND Страна = 'США';

Этот запрос выбирает всех пользователей, возраст которых больше 18 лет и которые находятся в США. То есть обе части условия должны быть истинными для того, чтобы запись попала в результат.
Пример использования:
Пользователь с возрастом 19 лет из США — запись будет возвращена (оба условия истинны).
Пользователь с возрастом 20 лет из Канады — запись не будет возвращена (второе условие ложно).
Пользователь с возрастом 15 лет из США — запись не будет возвращена (первое условие ложно).
Как работает оператор LIMIT
Оператор LIMIT в SQL используется для ограничения количества записей, возвращаемых запросом. Это особенно полезно, когда нужно получать лишь часть данных, а не всю таблицу.
Пример использования:
SELECT * FROM Пользователи LIMIT 10;
Этот запрос вернет первые 10 записей из таблицы "Пользователи".
SELECT * FROM Пользователи LIMIT 5 OFFSET 10;
Этот запрос начнет возвращать записи с 11-й (так как OFFSET 10 пропускает первые 10 записей) и вернет следующие 5 записей.
Таким образом, LIMIT помогает управлять объемом возвращаемой информации, что полезно в случаях с большими таблицами.
Что такое нормализация и каковы ее преимущества
Нормализация — это процесс организации данных в реляционной базе данных для уменьшения избыточности и устранения аномалий обновления. Она включает разделение данных на связанные таблицы и определение отношений между ними.
Преимущества нормализации:
Устранение избыточности:
Например, если у нас есть таблица заказов, в которой информация о клиентах дублируется для каждого заказа, нормализация поможет вынести данные о клиентах в отдельную таблицу.
Улучшение целостности данных:
Изменение информации о клиенте будет происходить только в одном месте, что уменьшает вероятность ошибок.
Упрощение управления данными:
С меньшей избыточностью и более четкой структурой базы данных проще делать изменения и поддерживать её в актуальном состоянии.
Какие формы нормализации существуют
Первая нормальная форма (1NF):
В ней все атрибуты должны содержать только атомарные (неделимые) значения.
Например, если поле "Телефоны" содержит список номеров через запятую, это нарушение 1NF. Каждому номеру должен соответствовать отдельный ряд.
Вторая нормальная форма (2NF):
Достигается, когда база удовлетворяет 1NF и все неключевые столбцы зависят от всего первичного ключа.
Например, если у нас есть таблица с заказами, где есть поля "КлиентID" и "Имя клиента", то "Имя клиента" должно быть в отдельной таблице, чтобы избежать зависимости от только частичного ключа.
Третья нормальная форма (3NF):
Достигается, когда база удовлетворяет 2NF и никакие неключевые столбцы не зависят друг от друга (т.е. отсутствуют транзитивные зависимости).
Например, если у нас есть поле "Город" и "Штат", где "Штат" зависит от "Города", то это не будет 3NF. Данные о штатах должны находиться в отдельной таблице, связанной с городами.
Что такое денормализация
Денормализация — это процесс, обратный нормализации, который используется для повышения производительности за счет добавления избыточности в базу данных. Это может быть полезно в ситуациях, когда необходим быстрый доступ к данным, и не критично иметь их в идеально структурированном виде.
Пример использования:
В интернет-магазине, если часто запрашиваются суммы заказов и имена клиентов, можно добавить в таблицу заказов поле с именем клиента, даже если оно уже хранится в таблице клиентов. Это уменьшит количество соединений в запросах и ускорит его выполнение.
Из каких подмножеств состоит SQL
SQL (Structured Query Language) делится на несколько подмножеств:
DDL (Data Definition Language):
Этот подмножество используется для определения структуры баз данных.
Команды: CREATE, ALTER, DROP.
Пример: CREATE TABLE Пользователи (ID int, Имя varchar(50));
DML (Data Manipulation Language):
Употребляется для манипуляции данными в базе.
Команды: SELECT, INSERT, UPDATE, DELETE.
Пример: INSERT INTO Пользователи (ID, Имя) VALUES (1, 'Иван');
DCL (Data Control Language):
Используется для управления доступом к данным.
Команды: GRANT, REVOKE.
Пример: GRANT SELECT ON Пользователи TO Пользователь1;
TCL (Transaction Control Language):
Позволяет управлять транзакциями, обеспечивая целостность данных.
Команды: COMMIT, ROLLBACK.
Пример: COMMIT; после успешного выполнения серии операций для подтверждения изменений.


